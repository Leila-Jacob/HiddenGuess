/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface HiddenGuessInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_DURATION"
      | "MAX_ENTRY_FEE"
      | "MAX_PLAYERS"
      | "MIN_DURATION"
      | "MIN_ENTRY_FEE"
      | "MIN_PLAYERS"
      | "allowPlayerGuessDecryption"
      | "claimReward"
      | "createRoom"
      | "emergencyWithdraw"
      | "getPlayer"
      | "getPlayerGuess"
      | "getRoom"
      | "getRoomPlayers"
      | "getTarget"
      | "getWinningGuess"
      | "joinRoom"
      | "mockGuesses"
      | "mockMode"
      | "mockTargets"
      | "nextRoomId"
      | "owner"
      | "players"
      | "protocolId"
      | "renounceOwnership"
      | "revealRoom"
      | "roomPlayers"
      | "rooms"
      | "submitGuess"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DebugInfo"
      | "GuessSubmitted"
      | "OwnershipTransferred"
      | "PlayerJoined"
      | "RewardClaimed"
      | "RoomCreated"
      | "RoomRevealed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_ENTRY_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PLAYERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_ENTRY_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_PLAYERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowPlayerGuessDecryption",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createRoom",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayer",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerGuess",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoom",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoomPlayers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTarget",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWinningGuess",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "joinRoom",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mockGuesses",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "mockMode", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mockTargets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextRoomId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revealRoom",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "roomPlayers",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "rooms", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "submitGuess",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_ENTRY_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PLAYERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_ENTRY_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_PLAYERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowPlayerGuessDecryption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createRoom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPlayer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerGuess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRoom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoomPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTarget", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWinningGuess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinRoom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mockGuesses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mockMode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mockTargets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextRoomId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revealRoom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "roomPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rooms", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitGuess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace DebugInfoEvent {
  export type InputTuple = [
    message: string,
    minRange: BigNumberish,
    maxRange: BigNumberish,
    maxPlayers: BigNumberish,
    duration: BigNumberish,
    entryFee: BigNumberish,
    msgValue: BigNumberish
  ];
  export type OutputTuple = [
    message: string,
    minRange: bigint,
    maxRange: bigint,
    maxPlayers: bigint,
    duration: bigint,
    entryFee: bigint,
    msgValue: bigint
  ];
  export interface OutputObject {
    message: string;
    minRange: bigint;
    maxRange: bigint;
    maxPlayers: bigint;
    duration: bigint;
    entryFee: bigint;
    msgValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GuessSubmittedEvent {
  export type InputTuple = [roomId: BigNumberish, player: AddressLike];
  export type OutputTuple = [roomId: bigint, player: string];
  export interface OutputObject {
    roomId: bigint;
    player: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerJoinedEvent {
  export type InputTuple = [roomId: BigNumberish, player: AddressLike];
  export type OutputTuple = [roomId: bigint, player: string];
  export interface OutputObject {
    roomId: bigint;
    player: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardClaimedEvent {
  export type InputTuple = [
    roomId: BigNumberish,
    winner: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [roomId: bigint, winner: string, amount: bigint];
  export interface OutputObject {
    roomId: bigint;
    winner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoomCreatedEvent {
  export type InputTuple = [
    roomId: BigNumberish,
    creator: AddressLike,
    minRange: BigNumberish,
    maxRange: BigNumberish,
    maxPlayers: BigNumberish,
    deadline: BigNumberish,
    entryFee: BigNumberish
  ];
  export type OutputTuple = [
    roomId: bigint,
    creator: string,
    minRange: bigint,
    maxRange: bigint,
    maxPlayers: bigint,
    deadline: bigint,
    entryFee: bigint
  ];
  export interface OutputObject {
    roomId: bigint;
    creator: string;
    minRange: bigint;
    maxRange: bigint;
    maxPlayers: bigint;
    deadline: bigint;
    entryFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoomRevealedEvent {
  export type InputTuple = [
    roomId: BigNumberish,
    winner: AddressLike,
    winningGuess: BigNumberish,
    target: BigNumberish
  ];
  export type OutputTuple = [
    roomId: bigint,
    winner: string,
    winningGuess: bigint,
    target: bigint
  ];
  export interface OutputObject {
    roomId: bigint;
    winner: string;
    winningGuess: bigint;
    target: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HiddenGuess extends BaseContract {
  connect(runner?: ContractRunner | null): HiddenGuess;
  waitForDeployment(): Promise<this>;

  interface: HiddenGuessInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_DURATION: TypedContractMethod<[], [bigint], "view">;

  MAX_ENTRY_FEE: TypedContractMethod<[], [bigint], "view">;

  MAX_PLAYERS: TypedContractMethod<[], [bigint], "view">;

  MIN_DURATION: TypedContractMethod<[], [bigint], "view">;

  MIN_ENTRY_FEE: TypedContractMethod<[], [bigint], "view">;

  MIN_PLAYERS: TypedContractMethod<[], [bigint], "view">;

  allowPlayerGuessDecryption: TypedContractMethod<
    [roomId: BigNumberish, player: AddressLike],
    [string],
    "nonpayable"
  >;

  claimReward: TypedContractMethod<
    [roomId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createRoom: TypedContractMethod<
    [
      minRange: BigNumberish,
      maxRange: BigNumberish,
      maxPlayers: BigNumberish,
      duration: BigNumberish,
      entryFee: BigNumberish,
      targetEuint32: BytesLike,
      targetProof: BytesLike
    ],
    [void],
    "payable"
  >;

  emergencyWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  getPlayer: TypedContractMethod<
    [roomId: BigNumberish, player: AddressLike],
    [
      [string, boolean, boolean] & {
        playerAddress: string;
        hasSubmitted: boolean;
        hasClaimed: boolean;
      }
    ],
    "view"
  >;

  getPlayerGuess: TypedContractMethod<
    [roomId: BigNumberish, player: AddressLike],
    [string],
    "view"
  >;

  getRoom: TypedContractMethod<
    [roomId: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        string
      ] & {
        roomId_: bigint;
        creator: string;
        minRange: bigint;
        maxRange: bigint;
        maxPlayers: bigint;
        currentPlayers: bigint;
        deadline: bigint;
        entryFee: bigint;
        rewardPool: bigint;
        isActive: boolean;
        isRevealed: boolean;
        winner: string;
      }
    ],
    "view"
  >;

  getRoomPlayers: TypedContractMethod<
    [roomId: BigNumberish],
    [string[]],
    "view"
  >;

  getTarget: TypedContractMethod<[roomId: BigNumberish], [string], "view">;

  getWinningGuess: TypedContractMethod<
    [roomId: BigNumberish],
    [string],
    "view"
  >;

  joinRoom: TypedContractMethod<[roomId: BigNumberish], [void], "payable">;

  mockGuesses: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  mockMode: TypedContractMethod<[], [boolean], "view">;

  mockTargets: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  nextRoomId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  players: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [string, string, boolean, boolean] & {
        playerAddress: string;
        guess: string;
        hasSubmitted: boolean;
        hasClaimed: boolean;
      }
    ],
    "view"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  revealRoom: TypedContractMethod<[roomId: BigNumberish], [void], "nonpayable">;

  roomPlayers: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  rooms: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        boolean,
        boolean,
        string,
        string
      ] & {
        roomId: bigint;
        creator: string;
        minRange: bigint;
        maxRange: bigint;
        maxPlayers: bigint;
        currentPlayers: bigint;
        deadline: bigint;
        entryFee: bigint;
        rewardPool: bigint;
        target: string;
        isActive: boolean;
        isRevealed: boolean;
        winner: string;
        winningGuess: string;
      }
    ],
    "view"
  >;

  submitGuess: TypedContractMethod<
    [roomId: BigNumberish, guessEuint32: BytesLike, guessProof: BytesLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_ENTRY_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_PLAYERS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_ENTRY_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_PLAYERS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allowPlayerGuessDecryption"
  ): TypedContractMethod<
    [roomId: BigNumberish, player: AddressLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimReward"
  ): TypedContractMethod<[roomId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createRoom"
  ): TypedContractMethod<
    [
      minRange: BigNumberish,
      maxRange: BigNumberish,
      maxPlayers: BigNumberish,
      duration: BigNumberish,
      entryFee: BigNumberish,
      targetEuint32: BytesLike,
      targetProof: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getPlayer"
  ): TypedContractMethod<
    [roomId: BigNumberish, player: AddressLike],
    [
      [string, boolean, boolean] & {
        playerAddress: string;
        hasSubmitted: boolean;
        hasClaimed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayerGuess"
  ): TypedContractMethod<
    [roomId: BigNumberish, player: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoom"
  ): TypedContractMethod<
    [roomId: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        string
      ] & {
        roomId_: bigint;
        creator: string;
        minRange: bigint;
        maxRange: bigint;
        maxPlayers: bigint;
        currentPlayers: bigint;
        deadline: bigint;
        entryFee: bigint;
        rewardPool: bigint;
        isActive: boolean;
        isRevealed: boolean;
        winner: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoomPlayers"
  ): TypedContractMethod<[roomId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTarget"
  ): TypedContractMethod<[roomId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getWinningGuess"
  ): TypedContractMethod<[roomId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "joinRoom"
  ): TypedContractMethod<[roomId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "mockGuesses"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "mockMode"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "mockTargets"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextRoomId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "players"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [string, string, boolean, boolean] & {
        playerAddress: string;
        guess: string;
        hasSubmitted: boolean;
        hasClaimed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revealRoom"
  ): TypedContractMethod<[roomId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "roomPlayers"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "rooms"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        boolean,
        boolean,
        string,
        string
      ] & {
        roomId: bigint;
        creator: string;
        minRange: bigint;
        maxRange: bigint;
        maxPlayers: bigint;
        currentPlayers: bigint;
        deadline: bigint;
        entryFee: bigint;
        rewardPool: bigint;
        target: string;
        isActive: boolean;
        isRevealed: boolean;
        winner: string;
        winningGuess: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "submitGuess"
  ): TypedContractMethod<
    [roomId: BigNumberish, guessEuint32: BytesLike, guessProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "DebugInfo"
  ): TypedContractEvent<
    DebugInfoEvent.InputTuple,
    DebugInfoEvent.OutputTuple,
    DebugInfoEvent.OutputObject
  >;
  getEvent(
    key: "GuessSubmitted"
  ): TypedContractEvent<
    GuessSubmittedEvent.InputTuple,
    GuessSubmittedEvent.OutputTuple,
    GuessSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PlayerJoined"
  ): TypedContractEvent<
    PlayerJoinedEvent.InputTuple,
    PlayerJoinedEvent.OutputTuple,
    PlayerJoinedEvent.OutputObject
  >;
  getEvent(
    key: "RewardClaimed"
  ): TypedContractEvent<
    RewardClaimedEvent.InputTuple,
    RewardClaimedEvent.OutputTuple,
    RewardClaimedEvent.OutputObject
  >;
  getEvent(
    key: "RoomCreated"
  ): TypedContractEvent<
    RoomCreatedEvent.InputTuple,
    RoomCreatedEvent.OutputTuple,
    RoomCreatedEvent.OutputObject
  >;
  getEvent(
    key: "RoomRevealed"
  ): TypedContractEvent<
    RoomRevealedEvent.InputTuple,
    RoomRevealedEvent.OutputTuple,
    RoomRevealedEvent.OutputObject
  >;

  filters: {
    "DebugInfo(string,uint32,uint32,uint32,uint256,uint256,uint256)": TypedContractEvent<
      DebugInfoEvent.InputTuple,
      DebugInfoEvent.OutputTuple,
      DebugInfoEvent.OutputObject
    >;
    DebugInfo: TypedContractEvent<
      DebugInfoEvent.InputTuple,
      DebugInfoEvent.OutputTuple,
      DebugInfoEvent.OutputObject
    >;

    "GuessSubmitted(uint256,address)": TypedContractEvent<
      GuessSubmittedEvent.InputTuple,
      GuessSubmittedEvent.OutputTuple,
      GuessSubmittedEvent.OutputObject
    >;
    GuessSubmitted: TypedContractEvent<
      GuessSubmittedEvent.InputTuple,
      GuessSubmittedEvent.OutputTuple,
      GuessSubmittedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PlayerJoined(uint256,address)": TypedContractEvent<
      PlayerJoinedEvent.InputTuple,
      PlayerJoinedEvent.OutputTuple,
      PlayerJoinedEvent.OutputObject
    >;
    PlayerJoined: TypedContractEvent<
      PlayerJoinedEvent.InputTuple,
      PlayerJoinedEvent.OutputTuple,
      PlayerJoinedEvent.OutputObject
    >;

    "RewardClaimed(uint256,address,uint256)": TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;
    RewardClaimed: TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;

    "RoomCreated(uint256,address,uint32,uint32,uint32,uint256,uint256)": TypedContractEvent<
      RoomCreatedEvent.InputTuple,
      RoomCreatedEvent.OutputTuple,
      RoomCreatedEvent.OutputObject
    >;
    RoomCreated: TypedContractEvent<
      RoomCreatedEvent.InputTuple,
      RoomCreatedEvent.OutputTuple,
      RoomCreatedEvent.OutputObject
    >;

    "RoomRevealed(uint256,address,uint32,uint32)": TypedContractEvent<
      RoomRevealedEvent.InputTuple,
      RoomRevealedEvent.OutputTuple,
      RoomRevealedEvent.OutputObject
    >;
    RoomRevealed: TypedContractEvent<
      RoomRevealedEvent.InputTuple,
      RoomRevealedEvent.OutputTuple,
      RoomRevealedEvent.OutputObject
    >;
  };
}
